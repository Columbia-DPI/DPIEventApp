{"version":3,"sources":["contexts/auth0-context.js","pages/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Auth0Context","createContext","Auth0Provider","state","auth0Client","isLoading","isAuthenticated","user","config","domain","process","client_id","redirect_uri","window","location","origin","handleRedirectCallback","a","setState","getUser","history","replaceState","document","title","pathname","initializeAuth0","createAuth0Client","search","includes","this","children","props","configObject","loginWithRedirect","getTokenSilently","getIdTokenClaims","logout","Provider","value","Component","HomePage","useContext","onClick","name","returnTo","className","App","auth0","exact","path","render","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAIaA,EAAeC,0BAIfC,EAAb,4MACIC,MAAQ,CACNC,YAAa,KACbC,WAAW,EACXC,iBAAiB,EACjBC,KAAM,MALZ,EAQIC,OAAS,CACLC,OAAQC,0BACRC,UAAWD,mCACXE,aAAcC,OAAOC,SAASC,QAXtC,EAkBIC,uBAlBJ,sBAkB6B,4BAAAC,EAAA,6DACrB,EAAKC,SAAS,CAAEb,WAAW,IADN,SAGf,EAAKF,MAAMC,YAAYY,yBAHR,uBAIF,EAAKb,MAAMC,YAAYe,UAJrB,OAIfZ,EAJe,OAMrB,EAAKW,SAAS,CAAEX,OAAMD,iBAAiB,EAAMD,WAAW,IACxDQ,OAAOO,QAAQC,aAAa,GAAIC,SAASC,MAAOV,OAAOC,SAASU,UAP3C,2CAlB7B,EA4BIC,gBA5BJ,sBA4BsB,gCAAAR,EAAA,sEACYS,YAAkB,EAAKlB,QADnC,UACRJ,EADQ,OAEd,EAAKc,SAAS,CAAEd,iBAEZS,OAAOC,SAASa,OAAOC,SAAS,SAJtB,yCAKH,EAAKZ,0BALF,uBAQgBZ,EAAYE,kBAR5B,YAQRA,EARQ,0CASuBF,EAAYe,UATnC,iDAS+C,KAT/C,QASRZ,EATQ,KAUd,EAAKW,SAAS,CAAEb,WAAW,EAAOC,kBAAiBC,SAVrC,4CA5BtB,kEAeQsB,KAAKJ,oBAfb,+BAyCc,IAAD,EACqDI,KAAK1B,MAAvDC,EADH,EACGA,YAAaC,EADhB,EACgBA,UAAWC,EAD3B,EAC2BA,gBAAiBC,EAD5C,EAC4CA,KACzCuB,EAAaD,KAAKE,MAAlBD,SAEFE,EAAe,CACjB3B,YACAC,kBACAC,OACA0B,kBAAmB,kBAAU7B,EAAY6B,kBAAZ,MAAA7B,EAAW,YACxC8B,iBAAkB,kBAAU9B,EAAY8B,iBAAZ,MAAA9B,EAAW,YACvC+B,iBAAkB,kBAAU/B,EAAY+B,iBAAZ,MAAA/B,EAAW,YACvCgC,OAAQ,kBAAUhC,EAAYgC,OAAZ,MAAAhC,EAAW,aAGjC,OACI,kBAACJ,EAAaqC,SAAd,CAAuBC,MAAON,GAC3BF,OAzDf,GAAmCS,aCoBpBC,MAzBf,WAAqB,IAAD,EACuCC,qBAAWzC,GAA1DK,EADQ,EACRA,UAAWE,EADH,EACGA,KAAM0B,EADT,EACSA,kBAAmBG,EAD5B,EAC4BA,OAE5C,OACE,gDAEK/B,IAAcE,GACf,4BAAQmC,QAAST,GAAjB,SAEA5B,GACA,8CAECA,GAAaE,GACd,6BACE,oCAAUA,EAAKoC,KAAf,OACA,4BACID,QAAS,kBAAMN,EAAO,CAAEQ,SAAU/B,OAAOC,SAASC,UAClD8B,UAAU,2BAFd,aC2BGC,MAtCf,WACI,IAAMC,EAAQN,qBAAWzC,GAEzB,OACE,kBAAC,IAAD,KACE,6BACA,kBAAC,IAAD,CACEgD,OAAO,EACPC,KAAK,IACLC,OAAQ,kBACN,kBAAC,EAAD,SAIJ,kBAAC,IAAD,CACEF,OAAO,EACPC,KAAK,SACLC,OAAQ,kBACR,2CACGH,EAAMxC,MACL,2BAAIwC,EAAMxC,KAAKoC,UAMrB,kBAAC,IAAD,CACEK,OAAO,EACPC,KAAK,aACLC,OAAQ,kBACN,wDCzBQC,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCLNC,IAASJ,OACL,kBAAC,EAAD,KACI,kBAAC,EAAD,OAEN5B,SAASiC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.d0bf8c3a.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js';\n\n// create the context\nexport const Auth0Context = createContext();\n\n\n// create a provider\nexport class Auth0Provider extends Component {\n    state = {\n      auth0Client: null,\n      isLoading: true,\n      isAuthenticated: false,\n      user: null\n    };\n\n    config = {\n        domain: process.env.REACT_APP_AUTH0_DOMAIN,\n        client_id: process.env.REACT_APP_AUTH0_CLIENT_ID,\n        redirect_uri: window.location.origin\n    };\n\n    componentDidMount() {\n        this.initializeAuth0();\n    }\n\n    handleRedirectCallback = async () => {\n        this.setState({ isLoading: true });\n    \n        await this.state.auth0Client.handleRedirectCallback();\n        const user = await this.state.auth0Client.getUser();\n    \n        this.setState({ user, isAuthenticated: true, isLoading: false });\n        window.history.replaceState({}, document.title, window.location.pathname);\n    };\n\n    initializeAuth0 = async () => {\n        const auth0Client = await createAuth0Client(this.config);\n        this.setState({ auth0Client });\n\n        if (window.location.search.includes('code=')) {\n            return this.handleRedirectCallback();\n          }\n\n        const isAuthenticated = await auth0Client.isAuthenticated(); \n        const user = isAuthenticated ? await auth0Client.getUser() : null; \n        this.setState({ isLoading: false, isAuthenticated, user }); \n    };\n\n    render() {\n        const { auth0Client, isLoading, isAuthenticated, user } = this.state;\n        const { children } = this.props;\n\n        const configObject = { \n            isLoading, \n            isAuthenticated, \n            user,\n            loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n            getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n            getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n            logout: (...p) => auth0Client.logout(...p)\n        }; \n\n        return (\n            <Auth0Context.Provider value={configObject}>\n              {children}\n            </Auth0Context.Provider>\n        );\n    }\n}","import React, { Component, useContext } from \"react\";\nimport Auth0PContext, { Auth0Context } from '../contexts/auth0-context';\n\nfunction HomePage() {\n    const { isLoading, user, loginWithRedirect, logout } = useContext(Auth0Context);\n    \n    return(\n      <div>\n        Dumbeiwfjwoijfo\n        { !isLoading && !user &&(\n          <button onClick={loginWithRedirect}>Login</button>\n        )}\n        { isLoading && (\n          <p>Loading... ...</p>\n        )}\n        { !isLoading && user &&(\n          <div>\n            <p>Hello {user.name}!!!</p>\n            <button\n                onClick={() => logout({ returnTo: window.location.origin })}\n                className=\"button is-small is-dark\"\n            >Logout</button>\n          </div>\n        )}\n      </div>\n    );\n}\n\nexport default HomePage;\n","import React, {useContext, Component, useImperativeHandle, useReducer} from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport HomePage from \"./pages/home.jsx\";\nimport { Auth0Context } from './contexts/auth0-context';\n\nfunction App(){\n    const auth0 = useContext(Auth0Context);\n\n    return (\n      <BrowserRouter>\n        <div>\n        <Route\n          exact={true}\n          path=\"/\"\n          render={()=>(\n            <HomePage />\n          )}\n        />\n\n        <Route\n          exact={true}\n          path=\"/login\"\n          render={()=> (\n          <div>Hello Again\n            {auth0.user && (\n              <p>{auth0.user.name}</p>\n            )}\n          </div>\n          )}\n        />\n\n        <Route\n          exact={true}\n          path=\"/allevents\"\n          render={()=>(\n            <div>Hello hello hello</div>\n          )}\n        />\n        </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from './contexts/auth0-context';\n\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\nReactDOM.render(\n    <Auth0Provider>\n        <App />\n    </Auth0Provider>\n, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}